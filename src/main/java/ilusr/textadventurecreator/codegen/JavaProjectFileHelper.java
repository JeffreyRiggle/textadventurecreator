package ilusr.textadventurecreator.codegen;

public class JavaProjectFileHelper {
	public final static String POM = "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n"
			+ "xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n"
			+ "<modelVersion>4.0.0</modelVersion>\r\n"
			+ "<groupId>org.%1$s</groupId>\r\n"
			+ "<artifactId>%2$s</artifactId>\r\n"
			+ "<version>1.0.0-SNAPSHOT</version>\r\n"
			+ "<packaging>jar</packaging>\r\n"
			+ "<name>%2$s</name>\r\n"
			+ "<properties><project.build.sourceEncoding>UTF-8</project.build.sourceEncoding></properties>\r\n\r\n"
			+ "<repositories>\r\n"
			+ "\t<repository>\r\n"
			+ "\t\t<id>jriggle-mvn-repo</id>\r\n"
			+ "\t\t<url>https://s3.us-east-2.amazonaws.com/jriggle-mvn-repo/snapshot</url>\r\n"
			+ "\t\t<snapshots>\r\n"
			+ "\t\t\t<enabled>true</enabled>\r\n"
			+ "\t\t</snapshots>\r\n"
			+ "\t</repository>\r\n"
			+ "</repositories>\r\n"
			+ "<dependencies>\r\n"
			+ "\t<dependency>\r\n"
			+ "\t\t<groupId>com.ilusr.core</groupId>\r\n"
			+ "\t\t<artifactId>GSMLib</artifactId>\r\n"
			+ "\t\t<version>1.2.0-SNAPSHOT</version>\r\n"
			+ "\t</dependency>\r\n"
			+ "\t<dependency>\r\n"
			+ "\t\t<groupId>com.ilusr</groupId>\r\n"
			+ "\t\t<artifactId>TextAdventureLib</artifactId>\r\n"
			+ "\t\t<version>1.3.0-SNAPSHOT</version>\r\n"
			+ "\t\t<scope>compile</scope>\r\n"
			+ "\t</dependency>\r\n"
			+ "\t<dependency>\r\n"
			+ "\t\t<groupId>junit</groupId>\r\n"
			+ "\t\t<artifactId>junit</artifactId>\r\n"
			+ "\t\t<version>3.8.1</version>\r\n"
			+ "\t\t<scope>test</scope>\r\n"
			+ "\t</dependency>\r\n"
			+ "</dependencies>\r\n"
			+ "<build>\r\n"
			+ "\t<plugins>\r\n"
			+ "\t\t<plugin>\r\n"
			+ "\t\t\t<artifactId>maven-compiler-plugin</artifactId>\r\n"
			+ "\t\t\t<version>3.3</version>\r\n"
			+ "\t\t\t<configuration>\r\n"
			+ "\t\t\t\t<verbose>true</verbose>\r\n"
			+ "\t\t\t\t<source>1.8</source>\r\n"
			+ "\t\t\t\t<target>1.8</target>\r\n"
			+ "\t\t\t\t<showWarnings>true</showWarnings>\r\n"
			+ "\t\t\t</configuration>\r\n"
			+ "\t\t</plugin>\r\n"
			+ "\t\t<plugin>\r\n"
			+ "\t\t\t<artifactId>maven-assembly-plugin</artifactId>\r\n"
			+ "\t\t\t<configuration>\r\n"
			+ "\t\t\t\t<archive>\r\n"
			+ "\t\t\t\t\t<manifest>\r\n"
			+ "\t\t\t\t\t\t<mainClass>org.%1$s.%2$s.GameApp</mainClass>\r\n"
			+ "\t\t\t\t\t</manifest>\r\n"
			+ "\t\t\t\t</archive>\r\n"
			+ "\t\t\t\t<descriptorRefs>\r\n"
			+ "\t\t\t\t\t<descriptorRef>jar-with-dependencies</descriptorRef>\r\n"
			+ "\t\t\t\t</descriptorRefs>\r\n"
			+ "\t\t\t\t<appendAssemblyId>false</appendAssemblyId>\r\n"
			+ "\t\t\t</configuration>\r\n"
			+ "\t\t\t<executions>\r\n"
			+ "\t\t\t\t<execution>\r\n"
			+ "\t\t\t\t\t<id>make-assembly</id>\r\n"
			+ "\t\t\t\t\t<phase>package</phase>\r\n"
			+ "\t\t\t\t\t<goals>\r\n"
			+ "\t\t\t\t\t\t<goal>single</goal>\r\n"
			+ "\t\t\t\t\t</goals>\r\n"
			+ "\t\t\t\t</execution>\r\n"
			+ "\t\t\t</executions>\r\n"
			+ "\t\t</plugin>\r\n"
			+ "\t\t<plugin>\r\n"
			+ "\t\t\t<artifactId>maven-resources-plugin</artifactId>\r\n"
			+ "\t\t\t<version>3.0.1</version>\r\n"
			+ "\t\t\t<executions>\r\n"
			+ "\t\t\t\t<execution>\r\n"
			+ "\t\t\t\t\t<id>copy-resources-1</id>\r\n"
			+ "\t\t\t\t\t<phase>validate</phase>\r\n"
			+ "\t\t\t\t\t<goals>\r\n"
			+ "\t\t\t\t\t\t<goal>copy-resources</goal>\r\n"
			+ "\t\t\t\t\t</goals>\r\n"
			+ "\t\t\t\t\t<configuration>\r\n"
			+ "\t\t\t\t\t\t<outputDirectory>${basedir}/target/classes/org/%1$s/assets</outputDirectory>\r\n"
			+ "\t\t\t\t\t\t<resources>\r\n"
			+ "\t\t\t\t\t\t\t<resource>\r\n"
			+ "\t\t\t\t\t\t\t\t<directory>${basedir}/src/main/java/org/%1$s/assets</directory>\r\n"
			+ "\t\t\t\t\t\t\t\t<filtering>false</filtering>\r\n"
			+ "\t\t\t\t\t\t\t</resource>\r\n"
			+ "\t\t\t\t\t\t</resources>\r\n"
			+ "\t\t\t\t\t</configuration>\r\n"
			+ "\t\t\t\t</execution>\r\n"
			+ "\t\t\t\t<execution>\r\n"
			+ "\t\t\t\t\t<id>copy-resources-2</id>\r\n"
			+ "\t\t\t\t\t\t<phase>validate</phase>\r\n"
			+ "\t\t\t\t\t\t<goals>\r\n"
			+ "\t\t\t\t\t\t\t<goal>copy-resources</goal>\r\n"
			+ "\t\t\t\t\t\t</goals>\r\n"
			+ "\t\t\t\t\t<configuration>\r\n"
			+ "\t\t\t\t\t\t<outputDirectory>${basedir}/target/classes/org/%1$s/%2$s</outputDirectory>\r\n"
			+ "\t\t\t\t\t\t<resources>\r\n"
			+ "\t\t\t\t\t\t\t<resource>\r\n"
			+ "\t\t\t\t\t\t\t\t<directory>${basedir}/src/main/java/org/%1$s/%2$s</directory>\r\n"
			+ "\t\t\t\t\t\t\t\t<filtering>false</filtering>\r\n"
			+ "\t\t\t\t\t\t\t</resource>\r\n"
			+ "\t\t\t\t\t\t</resources>\r\n"
			+ "\t\t\t\t\t</configuration>\r\n"
			+ "\t\t\t\t</execution>\r\n"
			+ "\t\t\t</executions>\r\n"
			+ "\t\t</plugin>\r\n"
			+ "\t</plugins>\r\n"
			+ "</build>\r\n"
			+ "</project>";
	
	public final static String ASSETLOADER = "package org.%s.assets;\r\n\r\n"
			+ "import java.io.InputStream;\r\n\r\n"
			+ "public class AssetLoader {\r\n\r\n"
			+ "\tpublic static InputStream loadAssetStream(String file) {\r\n"
			+ "\t\treturn AssetLoader.class.getResourceAsStream(file);\r\n"
			+ "\t}\r\n"
			+ "}";
	
	public final static String GAMEAPP = "package org.%s.%s;\r\n\r\n"
			+ "import javafx.application.Application;\r\n\r\n"
			+ "public class GameApp {\r\n\r\n"
			+ "\tpublic static void main(String[] args) {\r\n\r\n"
			+ "\t\tApplication.launch(MainApplication.class);\r\n"
			+ "\t}\r\n"
			+ "}";
	
	public final static String GAMESTATEINITIALIZER = "package org.%s.%s;\r\n\r\n"
			+ "import ilusr.gamestatemanager.GameState;\r\n"
			+ "import ilusr.gamestatemanager.GameStateManager;\r\n"
			+ "import javafx.stage.Stage;\r\n"
			+ "import textadventurelib.persistence.TextAdventurePersistenceManager;\r\n\r\n"
			+ "public class GameStateInitializer {\r\n\r\n"
			+ "\tprivate Stage mainStage;\r\n"
			+ "\tprivate GameStateManager manager;\r\n\r\n"
			+ "\tpublic GameStateInitializer(Stage mainStage) {\r\n"
		    + "\t\tthis.mainStage = mainStage;\r\n\r\n"
		    + "\t\tinitialize();\r\n"
			+ "\t}\r\n\r\n"
		    + "\tprivate void initialize() {\r\n"
			+ "\t\tmanager = new <String>GameStateManager(\"NA\", new GameState(null));\r\n"
		    + "\t\tMainMenuGameState mainGameState = new MainMenuGameState(manager, mainStage);\r\n"
			+ "\t\tmanager.addGameState(GameStates.MAIN, mainGameState);\r\n"
		    + "\t\tmanager.addGameState(GameStates.TRANSITION, new TransitionGameState(mainStage, manager, buildPersistenceManager()));\r\n"
		    + "\t\tmanager.addGameState(GameStates.LOAD, new LoadGameState(manager, mainStage));\r\n"
		    + "\t\tmanager.currentGameState(mainGameState);\r\n"
	        + "\t}\r\n\r\n"
		    + "\tprivate TextAdventurePersistenceManager buildPersistenceManager() {\r\n"
	        + "\t\tTextAdventurePersistenceManager retVal = null;\r\n\r\n"
		    + "\t\ttry {\r\n"
			+ "\t\t\tretVal = new TextAdventurePersistenceManager(getClass().getResource(\"%s.xml\").toExternalForm());\r\n"
		    + "\t\t} catch (Exception e) {\r\n"
			+ "\t\t\te.printStackTrace();\r\n"
		    + "\t\t}\r\n\r\n"		
		    + "\t\treturn retVal;\r\n"
	        + "\t}\r\n\r\n"
	        + "\tpublic void run() {\r\n"
		    + "\t\tmanager.start();\r\n"
	        + "\t}\r\n"
            + "}";
	
	public final static String GAMESTATES = "package org.%s.%s;\r\n\r\n"
			+ "public class GameStates {\r\n\r\n"
			+ "\tpublic final static String TRANSITION = \"Transition\";\r\n"
			+ "\tpublic final static String MAIN = \"MainGame\";\r\n"
			+ "\tpublic final static String LOAD = \"Load\";\r\n}";
	
	public final static String LOADGAMEMODEL = "package org.%1$s.%2$s;\r\n" 
			+ "\r\n" 
			+ "import java.io.File;\r\n" 
			+ "import java.nio.file.Path;\r\n" 
			+ "import java.nio.file.WatchEvent;\r\n" 
			+ "\r\n" 
			+ "import ilusr.core.io.DirectoryWatcher;\r\n" 
			+ "import ilusr.core.io.FileUtilities;\r\n" 
			+ "import ilusr.core.io.StreamUtilities;\r\n" 
			+ "import ilusr.core.io.UpdateType;\r\n" 
			+ "import ilusr.gamestatemanager.GameStateManager;\r\n" 
			+ "import javafx.application.Platform;\r\n" 
			+ "import javafx.beans.property.SimpleBooleanProperty;\r\n" 
			+ "import javafx.beans.property.SimpleObjectProperty;\r\n" 
			+ "import javafx.collections.FXCollections;\r\n" 
			+ "import javafx.collections.ObservableList;\r\n" 
			+ "import javafx.stage.Stage;\r\n" 
			+ "import textadventurelib.persistence.TextAdventurePersistenceManager;\r\n" 
			+ "\r\n" 
			+ "public class LoadGameModel {\r\n" 
			+ "\r\n" 
			+ "\tprivate SimpleBooleanProperty foundGames;\r\n" 
			+ "\tprivate SimpleObjectProperty<Runnable> back;\r\n" 
			+ "\tprivate ObservableList<SaveItem> saves;\r\n" 
			+ "\tprivate SimpleObjectProperty<SaveItem> selectedItem;\r\n" 
			+ "\tprivate DirectoryWatcher watcher;\r\n" 
			+ "\tprivate GameStateManager manager;\r\n" 
			+ "\tprivate Stage stage;\r\n" + "\t\r\n" 
			+ "\tpublic LoadGameModel(GameStateManager manager, Stage stage) {\r\n" 
			+ "\t\tthis.manager = manager;\r\n" 
			+ "\t\tthis.stage = stage;\r\n" 
			+ "\t\tfoundGames = new SimpleBooleanProperty();\r\n" 
			+ "\t\tback = new SimpleObjectProperty<Runnable>();\r\n" 
			+ "\t\tsaves = FXCollections.observableArrayList();\r\n" 
			+ "\t\tselectedItem = new SimpleObjectProperty<SaveItem>();\r\n" 
			+ "\t\t\r\n" + "\t\tinitialize();\r\n" 
			+ "\t}\r\n" 
			+ "\r\n" 
			+ "\tprivate void initialize() {\r\n" 
			+ "\t\ttry {\r\n" 
			+ "\t\t\tFile jarDomain = new File(getClass().getProtectionDomain().getCodeSource().getLocation().toURI().getPath());\r\n" 
			+ "\t\t\tString saveLocation = jarDomain.getParent() + \"/save/\";\r\n" 
			+ "\t\t\tfindInitialSaves(saveLocation);\r\n" 
			+ "\t\t\t\r\n" 
			+ "\t\t\twatcher = new DirectoryWatcher(saveLocation);\r\n" 
			+ "\t\t\twatcher.startWatching((e, t) -> {\r\n" 
			+ "\t\t\t\tif (t == UpdateType.Added) {\r\n" 
			+ "\t\t\t\t\tprocessAdd(e);\r\n" 
			+ "\t\t\t\t} else if (t == UpdateType.Removed) {\r\n" 
			+ "\t\t\t\t\tprocessRemove(e);\r\n" 
			+ "\t\t\t\t}\r\n" + "\t\t\t});\r\n" 
			+ "\t\t} catch (Exception e) {\r\n" 
			+ "\t\t\te.printStackTrace();\r\n" 
			+ "\t\t}\r\n" + "\t\t\r\n" 
			+ "\t}\r\n" + "\t\r\n" 
			+ "\tprivate void findInitialSaves(String saveLocation) {\r\n" 
			+ "\t\tFile dir = new File(saveLocation);\r\n" 
			+ "\t\tif (!dir.exists()) {\r\n" 
			+ "\t\t\tdir.mkdirs();\r\n" 
			+ "\t\t\tcopyGameStates(dir);\r\n" 
			+ "\t\t\treturn;\r\n" + "\t\t}\r\n" 
			+ "\t\t\r\n" 
			+ "\t\tfor (File file : dir.listFiles()) {\r\n" 
			+ "\t\t\tString path = file.getAbsolutePath();\r\n" 
			+ "\t\t\tif (!path.toLowerCase().endsWith(\".xml\")) {\r\n" 
			+ "\t\t\t\tcontinue;\r\n" 
			+ "\t\t\t}\r\n" 
			+ "\t\t\t\r\n" 
			+ "\t\t\taddSave(path);\r\n" 
			+ "\t\t}\r\n" + "\t\t\r\n" 
			+ "\t\tcopyGameStates(dir);\r\n" 
			+ "\t}\r\n" + "\t\r\n" 
			+ "\tprivate void copyGameStates(File saveLocation) {\r\n" 
			+ "\t\tFile gameState = new File(saveLocation.getAbsolutePath() + \"\\\\%3$s\");\r\n" 
			+ "\t\tif (gameState.exists()) {\r\n" 
			+ "\t\t\treturn;\r\n" + "\t\t}\r\n" 
			+ "\t\t\r\n" + "\t\ttry {\r\n" 
			+ "\t\t\tString content = StreamUtilities.getStreamContents(getClass().getResourceAsStream(\"%3$s\"));\r\n" 
			+ "\t\t\tFileUtilities.saveToFile(gameState.getAbsolutePath(), content);\r\n" 
			+ "\t\t} catch (Exception e) {\r\n" 
			+ "\t\t\te.printStackTrace();\r\n" 
			+ "\t\t}\r\n" 
			+ "\t}\r\n" 
			+ "\t\r\n" 
			+ "\t@SuppressWarnings(\"unchecked\")\r\n" 
			+ "\tprivate void processAdd(WatchEvent<?> event) {\r\n" 
			+ "\t\tWatchEvent<Path> path = (WatchEvent<Path>)event;\r\n" 
			+ "\t\tFile file = path.context().toFile();\r\n" 
			+ "\t\t\r\n" 
			+ "\t\tString location = file.getAbsolutePath();\r\n" 
			+ "\t\tif (!location.toLowerCase().endsWith(\".xml\")) {\r\n" 
			+ "\t\t\treturn;\r\n" 
			+ "\t\t}\r\n" 
			+ "\t\t\r\n" 
			+ "\t\tPlatform.runLater(() -> {\r\n" 
			+ "\t\t\taddSave(location);\r\n" 
			+ "\t\t});\r\n" 
			+ "\t}\r\n" 
			+ "\t\r\n" 
			+ "\t@SuppressWarnings(\"unchecked\")\r\n" 
			+ "\tprivate void processRemove(WatchEvent<?> event) {\r\n" 
			+ "\t\tWatchEvent<Path> path = (WatchEvent<Path>)event;\r\n" 
			+ "\t\tFile file = path.context().toFile();\r\n" 
			+ "\t\t\r\n" 
			+ "\t\tString location = file.getAbsolutePath();\r\n" 
			+ "\t\tif (!location.toLowerCase().endsWith(\".xml\")) {\r\n" 
			+ "\t\t\treturn;\r\n" 
			+ "\t\t}\r\n" 
			+ "\t\t\r\n" 
			+ "\t\tPlatform.runLater(() -> {\r\n" 
			+ "\t\t\tremoveSave(location);\r\n" 
			+ "\t\t});\r\n" 
			+ "\t}\r\n" 
			+ "\t\r\n" 
			+ "\tprivate void addSave(String location) {\r\n" 
			+ "\t\tSaveItem item = new SaveItem(getSaveDisplay(location), location);\r\n" 
			+ "\t\tif (item.getDisplay().equals(\"gamestates\")) {\r\n" 
			+ "\t\t\treturn;\r\n" 
			+ "\t\t}\r\n" 
			+ "\t\t\r\n" 
			+ "\t\tsaves.add(item);\r\n" 
			+ "\t\t\r\n" 
			+ "\t\tif (!foundGames.get()) {\r\n" 
			+ "\t\t\tfoundGames.set(true);\r\n" 
			+ "\t\t}\r\n" 
			+ "\t}\r\n" 
			+ "\t\r\n" 
			+ "\tprivate void removeSave(String location) {\r\n" 
			+ "\t\tString display = getSaveDisplay(location);\r\n" 
			+ "\t\t\r\n" 
			+ "\t\tSaveItem removeItem = null;\r\n" 
			+ "\t\tfor (SaveItem item : saves) {\r\n" 
			+ "\t\t\tif (!item.getDisplay().equals(display)) {\r\n" 
			+ "\t\t\t\tcontinue;\r\n" 
			+ "\t\t\t}\r\n" 
			+ "\t\t\t\r\n" 
			+ "\t\t\tremoveItem = item;\r\n" 
			+ "\t\t\tbreak;\r\n" 
			+ "\t\t}\r\n" 
			+ "\t\t\r\n" 
			+ "\t\tif (removeItem != null) {\r\n" 
			+ "\t\t\tsaves.remove(removeItem);\r\n" 
			+ "\t\t}\r\n" 
			+ "\t\t\r\n" 
			+ "\t\tif (foundGames.get() && saves.size() <= 0) {\r\n" 
			+ "\t\t\tfoundGames.set(false);\r\n" 
			+ "\t\t}\r\n" + "\t}\r\n" 
			+ "\t\r\n" 
			+ "\tprivate String getSaveDisplay(String location) {\r\n" 
			+ "\t\tint start = location.lastIndexOf(\"/\");\r\n" 
			+ "\t\tstart = start == -1 ? location.lastIndexOf(\"\\\\\") : start;\r\n" 
			+ "\t\tstart = start == -1 ? 0 : start;\r\n" 
			+ "\t\treturn location.substring(start+1, location.length() - 4);\r\n" 
			+ "\t}\r\n" 
			+ "\t\r\n" 
			+ "\tpublic SimpleBooleanProperty foundGames() {\r\n" 
			+ "\t\treturn foundGames;\r\n" 
			+ "\t}\r\n" 
			+ "\r\n" 
			+ "\tpublic ObservableList<SaveItem> saves() {\r\n" 
			+ "\t\treturn saves;\r\n" 
			+ "\t}\r\n" 
			+ "\t\r\n" 
			+ "\tpublic void setOnBack(Runnable back) {\r\n" 
			+ "\t\tthis.back.set(back);\r\n" 
			+ "\t}\r\n" 
			+ "\r\n" 
			+ "\tpublic SimpleObjectProperty<Runnable> onBack() {\r\n" 
			+ "\t\treturn back;\r\n" 
			+ "\t}\r\n" 
			+ "\t\r\n" 
			+ "\tpublic SimpleObjectProperty<SaveItem> selectedItem() {\r\n" 
			+ "\t\treturn selectedItem;\r\n" 
			+ "\t}\r\n" 
			+ "\t\r\n" 
			+ "\tpublic void start() {\r\n" 
			+ "\t\tif (selectedItem.get() == null) {\r\n" 
			+ "\t\t\treturn;\r\n" 
			+ "\t\t}\r\n" 
			+ "\t\t\r\n" 
			+ "\t\ttry {\r\n" 
			+ "\t\t\tTextAdventurePersistenceManager game = new TextAdventurePersistenceManager(selectedItem.get().getPath());\r\n" 
			+ "\t\t\tTransitionGameState trans = new TransitionGameState(stage, manager, game);\r\n" 
			+ "\t\t\tmanager.addGameState(selectedItem.get().getDisplay(), trans);\r\n" 
			+ "\t\t\tmanager.completed(selectedItem.get().getDisplay());\r\n" 
			+ "\t\t} catch (Exception e) {\r\n" 
			+ "\t\t\te.printStackTrace();\r\n" 
			+ "\t\t}\r\n" 
			+ "\t}\r\n" 
			+ "}";
	
	public final static String LOADGAMESTATE = "package org.%s.%s;\r\n\r\n"
			+ "import ilusr.gamestatemanager.GameState;\r\n"
			+ "import ilusr.gamestatemanager.GameStateManager;\r\n"
			+ "import javafx.scene.Scene;\r\n"
			+ "import javafx.stage.Stage;\r\n\r\n"
			+ "public class LoadGameState extends GameState {\r\n\r\n"
			+ "\tprivate GameStateManager manager;\r\n"
			+ "\tprivate Stage mainStage;\r\n\r\n"
			+ "\tpublic LoadGameState(GameStateManager manager, Stage mainStage) {\r\n"
			+ "\t\tsuper(null);\r\n"
			+ "\t\tthis.manager = manager;\r\n"
			+ "\t\tthis.mainStage = mainStage;\r\n"
			+ "\t}\r\n\r\n"
			+ "\t@Override\r\n"
			+ "\tpublic <T> void run(T data) {\r\n"
			+ "\t\tLoadGameModel model = new LoadGameModel(manager, mainStage);\r\n"
			+ "\t\tmodel.setOnBack(() -> {\r\n"
			+ "\t\t\tmanager.completed(GameStates.MAIN);\r\n"
			+ "\t\t});\r\n"
			+ "\t\tmainStage.setScene(new Scene(new LoadGameView(model), 800, 600));\r\n"
			+ "\t}\r\n"
			+ "}";
	
	public final static String LOADGAMEVIEW = "package org.%s.%s;\r\n" 
			+ "\r\n" 
			+ "import java.net.URL;\r\n" 
			+ "import java.util.ResourceBundle;\r\n" 
			+ "\r\n" 
			+ "import ilusr.core.javafx.ObservableListBinder;\r\n" 
			+ "import javafx.fxml.FXML;\r\n" 
			+ "import javafx.fxml.FXMLLoader;\r\n" 
			+ "import javafx.fxml.Initializable;\r\n" 
			+ "import javafx.scene.control.Button;\r\n" 
			+ "import javafx.scene.control.Label;\r\n" 
			+ "import javafx.scene.control.ListView;\r\n" 
			+ "import javafx.scene.layout.AnchorPane;\r\n" 
			+ "\r\n" 
			+ "public class LoadGameView extends AnchorPane implements Initializable {\r\n" 
			+ "\r\n" 
			+ "\t@FXML\r\n" 
			+ "\tprivate Label invalidGameLabel;\r\n" 
			+ "\r\n" 
			+ "\t@FXML\r\n" 
			+ "\tprivate ListView<SaveItem> games;\r\n" 
			+ "\r\n" 
			+ "\t@FXML\r\n" 
			+ "\tprivate Button back;\r\n" 
			+ "\t\r\n" 
			+ "\t@FXML\r\n" 
			+ "\tprivate Button start;\r\n" 
			+ "\r\n" 
			+ "\tprivate LoadGameModel model;\r\n" 
			+ "\r\n" 
			+ "\tpublic LoadGameView(LoadGameModel model) {\r\n" 
			+ "\t\tthis.model = model;\r\n" 
			+ "\t\tFXMLLoader loader = new FXMLLoader(getClass().getResource(\"LoadGameView.fxml\"));\r\n" 
			+ "\t\tloader.setController(this);\r\n" 
			+ "\t\tloader.setRoot(this);\r\n" 
			+ "\r\n" 
			+ "\t\ttry {\r\n" 
			+ "\t\t\tloader.load();\r\n" 
			+ "\t\t} catch (Exception e) {\r\n" 
			+ "\t\t\te.printStackTrace();\r\n" 
			+ "\t\t}\r\n" 
			+ "\t}\r\n" 
			+ "\r\n" 
			+ "\t@Override\r\n" 
			+ "\tpublic void initialize(URL arg0, ResourceBundle arg1) {\r\n" 
			+ "\t\tupdateErrorState(model.foundGames().get());\r\n" 
			+ "\t\t\r\n" 
			+ "\t\tmodel.foundGames().addListener((v, o, n) -> {\r\n" 
			+ "\t\t\tupdateErrorState(n);\r\n" 
			+ "\t\t});\r\n" 
			+ "\t\t\r\n" 
			+ "\t\tback.setOnAction((e) -> {\r\n" 
			+ "\t\t\t if (model.onBack().get() == null) {\r\n" 
			+ "\t\t\t\treturn;\r\n" 
			+ "\t\t\t}\r\n" 
			+ "\r\n" 
			+ "\t\t\tmodel.onBack().get().run();\r\n" 
			+ "\t\t});\r\n" 
			+ "\t\t\r\n" 
			+ "\t\tstart.setOnAction((e) -> {\r\n" 
			+ "\t\t\tmodel.start();\r\n" 
			+ "\t\t});\r\n" 
			+ "\t\tstart.setDisable(true);\r\n" 
			+ "\t\t\r\n" 
			+ "\t\tgames.getSelectionModel().selectedItemProperty().addListener((v, o, n) -> {\r\n" 
			+ "\t\t\tstart.setDisable(n == null);\r\n" 
			+ "\t\t\tmodel.selectedItem().set(n);\r\n" 
			+ "\t\t});\r\n" 
			+ "\t\t\r\n" 
			+ "\t\tObservableListBinder<SaveItem> binder = new ObservableListBinder<SaveItem>(model.saves(), games.getItems());\r\n" 
			+ "\t\tbinder.bindSourceToTarget();\r\n" 
			+ "\t}\r\n" 
			+ "\r\n" 
			+ "\tprivate void updateErrorState(boolean hasGames) {\r\n" 
			+ "\t\tif (hasGames) {\r\n" 
			+ "\t\t\thideError();\r\n" 
			+ "\t\t} else {\r\n" 
			+ "\t\t\tshowError();\r\n" 
			+ "\t\t}\r\n" 
			+ "\t}\r\n" 
			+ "\r\n" 
			+ "\tprivate void hideError() {\r\n" 
			+ "\t\tinvalidGameLabel.visibleProperty().set(false);\r\n" 
			+ "\t\tgames.setDisable(false);\r\n" 
			+ "\t}\r\n" 
			+ "\r\n" 
			+ "\tprivate void showError() {\r\n" 
			+ "\t\tinvalidGameLabel.visibleProperty().set(true);\r\n" 
			+ "\t\tgames.setDisable(true);\r\n" 
			+ "\t}\r\n" 
			+ "}";
	
	public final static String LOADINGVIEW = "package org.%s.%s;\r\n\r\n"
			+ "import java.net.URL;\r\n"
			+ "import java.util.ResourceBundle;\r\n"
			+ "import javafx.fxml.FXML;\r\n"
			+ "import javafx.fxml.FXMLLoader;\r\n"
			+ "import javafx.fxml.Initializable;\r\n"
			+ "import javafx.scene.control.ProgressBar;\r\n"
			+ "import javafx.scene.layout.AnchorPane;\r\n\r\n"
			+ "public class LoadingView extends AnchorPane implements Initializable {\r\n\r\n"
			+ "\t@FXML\r\n"
			+ "\tprivate ProgressBar progress;\r\n\r\n"
			+ "\tpublic LoadingView() {\r\n"
			+ "\t\tFXMLLoader loader = new FXMLLoader(getClass().getResource(\"LoadingView.fxml\"));\r\n"
			+ "\t\tloader.setController(this);\r\n"
			+ "\t\tloader.setRoot(this);\r\n\r\n"
			+ "\t\ttry {\r\n"
			+ "\t\t\tloader.load();\r\n"
			+ "\t\t} catch (Exception e) {\r\n"
			+ "\t\t\te.printStackTrace();\r\n"
			+ "\t\t}\r\n"
			+ "\t}\r\n\r\n"
			+ "\t@Override\r\n"
			+ "\tpublic void initialize(URL arg0, ResourceBundle arg1) {\r\n"
			+ "\t\tsuper.getStylesheets().add(getClass().getResource(\"LoadingView.css\").toExternalForm());\r\n"
			+ "\t\tprogress.setProgress(ProgressBar.INDETERMINATE_PROGRESS);\r\n"
			+ "\t}\r\n"
			+ "}";
	
	public final static String MAINAPPLICATION = "package org.%s.%s;\r\n\r\n"
			+ "import org.textadventure.assets.AssetLoader;\r\n\r\n"
			+ "import javafx.application.Application;\r\n"
			+ "import javafx.application.Platform;\r\n"
			+ "import javafx.scene.image.Image;\r\n"
			+ "import javafx.stage.Stage;\r\n"
			+ "import ilusr.logrunner.LogRunner;\r\n\r\n"
			+ "public class MainApplication extends Application {\r\n\r\n"
			+ "\t@Override\r\n"
			+ "\tpublic void start(Stage arg0) throws Exception {\r\n"
			+ "\t\tLogRunner.setApplicationName(\"%s\");\r\n"
			+ "\t\targ0.setTitle(\"%s\");\r\n"
			+ "\t\targ0.getIcons().add(new Image(AssetLoader.loadAssetStream(\"gameicon.png\")));\r\n"
			+ "\t\tGameStateInitializer initializer = new GameStateInitializer(arg0);\r\n"
			+ "\t\targ0.show();\r\n"
			+ "\t\targ0.setOnCloseRequest((e) -> {\r\n"
			+ "\t\t\tPlatform.exit();\r\n"
			+ "\t\t\tSystem.exit(0);\r\n"
			+ "\t\t});\r\n"
			+ "\t\tinitializer.run();\r\n"
			+ "\t}\r\n"
			+ "}";
	
	public final static String MAINMENUGAMESTATE = "package org.%s.%s;\r\n\r\n"
			+ "import ilusr.gamestatemanager.GameState;\r\n"
			+ "import ilusr.gamestatemanager.GameStateManager;\r\n"
			+ "import javafx.scene.Scene;\r\n"
			+ "import javafx.scene.control.Button;\r\n"
			+ "import javafx.stage.Stage;\r\n\r\n"
			+ "public class MainMenuGameState extends GameState {\r\n\r\n"
			+ "\tprivate Stage mainStage;\r\n"
			+ "\tprivate GameStateManager manager;\r\n\r\n"
			+ "\tpublic MainMenuGameState(GameStateManager manager, Stage mainStage) {\r\n"
			+ "\t\tsuper(null);\r\n\r\n"
			+ "\t\tthis.mainStage = mainStage;\r\n"
			+ "\t\tthis.manager = manager;\r\n"
			+ "\t}\r\n\r\n"
			+ "\t@Override\r\n"
			+ "\tpublic <T> void run(T data) {\r\n"
			+ "\t\tMenuModel model = new MenuModel();\r\n\r\n"
			+ "\t\tButton play = new Button(\"Start!\");\r\n"
			+ "\t\tplay.setPrefWidth(200);\r\n"
			+ "\t\tplay.setPrefHeight(75);\r\n"
			+ "\t\tplay.setOnAction((e) -> {\r\n"
			+ "\t\t\tmanager.completed(GameStates.TRANSITION);\r\n"
			+ "\t\t});\r\n\r\n"
			+ "\t\tButton load = new Button(\"Load\");\r\n"
			+ "\t\tload.setPrefWidth(200);\r\n"
			+ "\t\tload.setPrefHeight(75);\r\n"
			+ "\t\tload.setOnAction((e) -> {\r\n"
			+ "\t\t\tmanager.completed(GameStates.LOAD);\r\n"
			+ "\t\t});\r\n\r\n"
			+ "\t\tmodel.menuItems().add(play);\r\n"
			+ "\t\tmodel.menuItems().add(load);\r\n"
			+ "\t\tmainStage.setScene(new Scene(new MenuView(model), 800, 600));\r\n"
			+ "\t}\r\n"
			+ "}";
	
	public final static String MENUMODEL = "package org.%s.%s;\r\n\r\n"
			+ "import javafx.collections.FXCollections;\r\n"
			+ "import javafx.collections.ObservableList;\r\n"
			+ "import javafx.scene.control.Button;\r\n\r\n"
			+ "public class MenuModel {\r\n\r\n"
			+ "\tprivate ObservableList<Button> menuItems;\r\n\r\n"
			+ "\tpublic MenuModel() {\r\n"
			+ "\t\tmenuItems = FXCollections.observableArrayList();\r\n"
			+ "\t}\r\n\r\n"
			+ "\tpublic ObservableList<Button> menuItems() {\r\n"
			+ "\t\treturn menuItems;\r\n"
			+ "\t}\r\n"
			+ "}";
	
	public final static String MENUVIEW = "package org.%s.%s;\r\n\r\n"
			+ "import java.net.URL;\r\n"
			+ "import java.util.ResourceBundle;\r\n"
			+ "import javafx.fxml.FXML;\r\n"
			+ "import javafx.fxml.FXMLLoader;\r\n"
			+ "import javafx.fxml.Initializable;\r\n"
			+ "import javafx.geometry.VPos;\r\n"
			+ "import javafx.scene.control.Button;\r\n"
			+ "import javafx.scene.layout.AnchorPane;\r\n"
			+ "import javafx.scene.layout.GridPane;\r\n"
			+ "import javafx.scene.layout.Priority;\r\n"
			+ "import javafx.scene.layout.RowConstraints;\r\n\r\n"
			+ "public class MenuView extends AnchorPane implements Initializable {\r\n\r\n"
			+ "\t@FXML\r\n"
			+ "\tprivate GridPane pane;\r\n\r\n"
			+ "\tprivate MenuModel model;\r\n\r\n"
			+ "\tpublic MenuView(MenuModel model) {\r\n"
			+ "\t\tthis.model = model;\r\n"
			+ "\t\tFXMLLoader loader = new FXMLLoader(getClass().getResource(\"MenuView.fxml\"));\r\n"
			+ "\t\tloader.setController(this);\r\n"
			+ "\t\tloader.setRoot(this);\r\n\r\n"
			+ "\t\ttry {\r\n"
			+ "\t\t\tloader.load();\r\n"
			+ "\t\t} catch (Exception e) {\r\n"
			+ "\t\t\te.printStackTrace();\r\n"
			+ "\t\t}\r\n"
			+ "\t}\r\n\r\n"
			+ "\tpublic void initialize(URL arg0, ResourceBundle arg1) {\r\n"
			+ "\t\tthis.getStylesheets().add(getClass().getResource(\"MenuView.css\").toExternalForm());\r\n\r\n"
			+ "\t\tint iter = 0;\r\n"
			+ "\t\tfor (Button item : model.menuItems()) {\r\n"
			+ "\t\t\tRowConstraints row = new RowConstraints(0, 75, Double.MAX_VALUE, Priority.ALWAYS, VPos.CENTER, false);\r\n"
			+ "\t\t\tpane.getRowConstraints().add(row);\r\n"
			+ "\t\t\titem.getStylesheets().add(getClass().getResource(\"MenuItem.css\").toExternalForm());\r\n"
			+ "\t\t\tpane.add(item, 0, iter);\r\n\r\n"
			+ "\t\t\titer++;\r\n"
			+ "\t\t}\r\n"
			+ "\t}\r\n"
			+ "}";
	
	public final static String SAVEITEM = "package org.%s.%s;\r\n" 
			+ "\r\n" 
			+ "public class SaveItem {\r\n" 
			+ "\r\n" 
			+ "\tprivate String display;\r\n" 
			+ "\tprivate String path;\r\n" 
			+ "\t\r\n" 
			+ "\tpublic SaveItem(String display, String path) {\r\n" 
			+ "\t\tthis.display = display;\r\n" 
			+ "\t\tthis.path = path;\r\n" 
			+ "\t}\r\n" 
			+ "\t\r\n" 
			+ "\tpublic String getDisplay() {\r\n" 
			+ "\t\treturn display;\r\n" 
			+ "\t}\r\n" 
			+ "\t\r\n" 
			+ "\tpublic String getPath() {\r\n" 
			+ "\t\treturn path;\r\n" 
			+ "\t}\r\n" 
			+ "\t\r\n" 
			+ "\t@Override\r\n" 
			+ "\tpublic String toString() {\r\n" 
			+ "\t\treturn display;\r\n" 
			+ "\t}\r\n" 
			+ "}";
	
	public final static String TRANSITIONGAMESTATE = "package org.%s.%s;\r\n\r\n"
			+ "import ilusr.gamestatemanager.GameState;\r\n"
			+ "import ilusr.gamestatemanager.GameStateManager;\r\n"
			+ "import javafx.application.Platform;\r\n"
			+ "import javafx.scene.Scene;\r\n"
			+ "import javafx.scene.layout.AnchorPane;\r\n"
			+ "import javafx.stage.Stage;\r\n"
			+ "import textadventurelib.core.ITextAdventureGameStateManager;\r\n"
			+ "import textadventurelib.persistence.TextAdventurePersistenceManager;\r\n\r\n"
			+ "public class TransitionGameState extends GameState {\r\n\r\n"
			+ "\tprivate Stage mainStage;\r\n"
			+ "\tprivate TextAdventurePersistenceManager game;\r\n"
			+ "\tprivate GameStateManager mainGameStateManager;\r\n"
			+ "\tprivate ITextAdventureGameStateManager gameManager;\r\n\r\n"
			+ "\tpublic TransitionGameState(Stage mainStage, GameStateManager mainGameStateManager, TextAdventurePersistenceManager game) {\r\n"
			+ "\t\tsuper(null);\r\n"
			+ "\t\tthis.mainStage = mainStage;\r\n"
			+ "\t\tthis.mainGameStateManager = mainGameStateManager;\r\n"
			+ "\t\tthis.game = game;\r\n"
			+ "\t}\r\n\r\n"
			+ "\t@Override\r\n"
			+ "\tpublic <T> void run(T data) {\r\n"
			+ "\t\tfinal double currWidth = mainStage.getScene().getWidth();\r\n"
			+ "\t\tfinal double currHeight = mainStage.getScene().getHeight();\r\n"
			+ "\t\tmainStage.setScene(new Scene(new LoadingView(), currWidth, currHeight));\r\n\r\n"
			+ "\t\tnew Thread() {\r\n"
			+ "\t\t\tpublic void run() {\r\n"
			+ "\t\t\t\ttry {\r\n"
			+ "\t\t\t\t\tgame.load();\r\n"
			+ "\t\t\t\t\tgameManager = game.textAdventure().convertToGameStateManager();\r\n\r\n"
			+ "\t\t\t\t\tPlatform.runLater(() -> {\r\n"
			+ "\t\t\t\t\t\tAnchorPane pane = new AnchorPane();\r\n"
			+ "\t\t\t\t\t\tmainStage.setScene(new Scene(pane, currWidth, currHeight));\r\n"
			+ "\t\t\t\t\t\tgameManager.setStage(pane);\r\n"
			+ "\t\t\t\t\t\tgameManager.addFinishListener(() -> {\r\n"
			+ "\t\t\t\t\t\t\tPlatform.runLater(() -> {\r\n"
			+ "\t\t\t\t\t\t\t\tmainGameStateManager.completed(GameStates.MAIN);\r\n"
			+ "\t\t\t\t\t\t\t});\r\n"
			+ "\t\t\t\t\t\t});\r\n"
			+ "\t\t\t\t\t\tgameManager.start();\r\n"
			+ "\t\t\t\t\t});\r\n"
			+ "\t\t\t\t} catch (Exception e) {\r\n"
			+ "\t\t\t\t\te.printStackTrace();\r\n"
			+ "\t\t\t\t}\r\n"
			+ "\t\t\t}\r\n"
			+ "\t\t}.start();\r\n"
			+ "\t}\r\n"
			+ "}";
	
	public final static String LOADGAMEMARKUP = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n"
			+ "<?import java.net.*?>\r\n"
			+ "<?import javafx.geometry.*?>\r\n"
			+ "<?import javafx.scene.control.*?>\r\n"
			+ "<?import javafx.scene.layout.*?>\r\n"
			+ "<?import javafx.scene.text.*?>\r\n"
			+ "<?import javafx.scene.layout.ColumnConstraints?>\r\n"
			+ "<?import javafx.scene.control.ListView?>\r\n"
			+ "<?import javafx.scene.control.Label?>\r\n"
			+ "<?import javafx.scene.layout.RowConstraints?>\r\n\r\n"
			+ "<fx:root type=\"javafx.scene.layout.AnchorPane\" xmlns:fx=\"http://javafx.com/fxml\">\r\n"
			+ "\t<GridPane fx:id=\"pane\" AnchorPane.topAnchor=\"0.0\" AnchorPane.leftAnchor=\"0.0\" AnchorPane.rightAnchor=\"0.0\" AnchorPane.bottomAnchor=\"0.0\">\r\n"
			+ "\t\t<columnConstraints>\r\n"
			+ "\t\t\t<ColumnConstraints hgrow=\"ALWAYS\" prefWidth=\"125\" halignment=\"CENTER\"/>\r\n"
			+ "\t\t\t<ColumnConstraints hgrow=\"ALWAYS\" prefWidth=\"125\" halignment=\"CENTER\"/>\r\n"
			+ "\t\t</columnConstraints>\r\n"
			+ "\t\t<rowConstraints>\r\n"
			+ "\t\t\t<RowConstraints vgrow=\"ALWAYS\" prefHeight=\"300\" valignment=\"CENTER\"/>\r\n"
			+ "\t\t\t<RowConstraints vgrow=\"NEVER\" minHeight=\"25\" prefHeight=\"45\" valignment=\"CENTER\"/>\r\n"
			+ "\t\t</rowConstraints>\r\n"
			+ "\t\t<padding><Insets top=\"25\" right=\"25\" bottom=\"25\" left=\"25\"/></padding>\r\n\r\n"
			+ "\t\t<StackPane GridPane.columnIndex=\"0\" GridPane.rowIndex=\"0\" GridPane.columnSpan=\"2\">\r\n"
			+ "\t\t\t<ListView fx:id=\"games\" />\r\n"
			+ "\t\t\t<Label fx:id=\"invalidGameLabel\" text=\"No Saves found.\" />\r\n"
			+ "\t\t</StackPane>\r\n"
			+ "\t\t<Button fx:id=\"back\" text=\"Back\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"1\" />\r\n"
			+ "\t\t<Button fx:id=\"start\" text=\"Start\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"1\" />\r\n"
			+ "\t</GridPane>\r\n"
			+ "</fx:root>";
	
	public final static String LOADINGSTYLE = "#pane {\r\n"
			+ "\t-fx-background-image: url('../assets/%s');\r\n"
			+ "\t-fx-background-image-repeat: no-repeat;\r\n"
			+ "\t-fx-background-size: stretch;\r\n"
			+ "}\r\n\r\n"
			+ "#progress {\r\n"
			+ "\t-fx-box-border: transparent;\r\n"
			+ "\t-fx-accent: rgba(124, 252, 0, .8);\r\n"
			+ "}";
	
	public final static String LOADINGMARKUP = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n"
			+ "<?import java.net.*?>\r\n"
			+ "<?import javafx.geometry.*?>\r\n"
			+ "<?import javafx.scene.control.*?>\r\n"
			+ "<?import javafx.scene.layout.*?>\r\n"
			+ "<?import javafx.scene.text.*?>\r\n"
			+ "<?import javafx.scene.layout.ColumnConstraints?>\r\n"
			+ "<?import javafx.scene.layout.RowConstraints?>\r\n\r\n"
			+ "<fx:root type=\"javafx.scene.layout.AnchorPane\" xmlns:fx=\"http://javafx.com/fxml\">\r\n"
			+ "\t<GridPane fx:id=\"pane\" AnchorPane.topAnchor=\"0.0\" AnchorPane.leftAnchor=\"0.0\" AnchorPane.rightAnchor=\"0.0\" AnchorPane.bottomAnchor=\"0.0\">\r\n"
			+ "\t\t<columnConstraints>\r\n"
			+ "\t\t\t<ColumnConstraints hgrow=\"ALWAYS\" prefWidth=\"250\" halignment=\"CENTER\"/>\r\n"
			+ "\t\t</columnConstraints>\r\n"
			+ "\t\t<rowConstraints>\r\n"
			+ "\t\t\t<RowConstraints vgrow=\"ALWAYS\" prefHeight=\"100\" valignment=\"CENTER\"/>\r\n"
			+ "\t\t</rowConstraints>\r\n"
			+ "\t\t<padding><Insets top=\"25\" right=\"25\" bottom=\"25\" left=\"25\"/></padding>\r\n"
			+ "\t\t<ProgressBar fx:id=\"progress\" GridPane.columnIndex=\"0\" GridPane.rowIndex=\"0\" prefWidth=\"200\" prefHeight=\"65\"/>\r\n"
			+ "\t</GridPane>\r\n"
			+ "</fx:root>";
	
	public final static String MENUITEMSTYLE = ".button {\r\n"
			+ "\t-fx-background-color: Transparent;\r\n"
			+ "\t-fx-border-color: Black;\r\n"
			+ "\t-fx-border-style: outside;\r\n"
			+ "\t-fx-border-width: 1;\r\n"
			+ "}\r\n\r\n"
			+ ".button:hover {\r\n"
			+ "\t-fx-background-color: rgba(0, 247, 15, .6);\r\n"
			+ "}";
	
	public final static String MENUSTYLE = "#pane {\r\n"
			+ "\t-fx-background-image: url('../assets/%s');\r\n"
			+ "\t-fx-background-image-repeat: no-repeat;\r\n"
			+ "\t-fx-background-size: stretch;\r\n"
			+ "}";
	
	public final static String MENUMARKUP = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n"
			+ "<?import java.net.*?>\r\n"
			+ "<?import javafx.geometry.*?>\r\n"
			+ "<?import javafx.scene.control.*?>\r\n"
			+ "<?import javafx.scene.layout.*?>\r\n"
			+ "<?import javafx.scene.text.*?>\r\n"
			+ "<?import javafx.scene.layout.ColumnConstraints?>\r\n\r\n"
			+ "<fx:root type=\"javafx.scene.layout.AnchorPane\" xmlns:fx=\"http://javafx.com/fxml\">\r\n"
			+ "\t<GridPane fx:id=\"pane\" AnchorPane.topAnchor=\"0.0\" AnchorPane.leftAnchor=\"0.0\" AnchorPane.rightAnchor=\"0.0\" AnchorPane.bottomAnchor=\"0.0\">\r\n"
			+ "\t\t<columnConstraints>\r\n"
			+ "\t\t\t<ColumnConstraints hgrow=\"ALWAYS\" prefWidth=\"250\" halignment=\"CENTER\"/>\r\n"
			+ "\t\t</columnConstraints>\r\n"
			+ "\t\t<padding><Insets top=\"25\" right=\"25\" bottom=\"25\" left=\"25\"/></padding>\r\n"
			+ "\t</GridPane>"
			+ "\r\n</fx:root>";
	
}
